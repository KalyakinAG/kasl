//  Подсистема "Работа со данными выбора"
//	Автор: Калякин Андрей Г.
//  Описание размещено на ресурсе: https://infostart.ru/public/841960/
// Версия 1.01 
// Версия 1.02
//	Изменена работа с Параметры.СтрокаПоиска для совместимостьи с 8.3.11

Функция ПолучитьПоляВводаПоСтроке(МетаданныеОбъекта) Экспорт
	
	ПоляПоиска = Новый Массив;
	Для каждого Поле из МетаданныеОбъекта.ВводПоСтроке Цикл
		ПоляПоиска.Добавить(Поле.Имя);
	КонецЦикла;
	
	Возврат ПоляПоиска;
	
КонецФункции

Функция ПолучитьПредставление(Шаблон, Данные, Поля) Экспорт
	Если ПустаяСтрока(Шаблон) Тогда
		МассивСтрокПредставления = Новый Массив;
		Для Каждого ИмяПоля Из Поля Цикл
			МассивСтрокПредставления.Добавить(Данные[ИмяПоля]);
		КонецЦикла;
		Представление = СтрСоединить(МассивСтрокПредставления, ",");
	Иначе
		Представление = СтрЗаменить(Шаблон, "[ПредставлениеСсылки]", Данные.ПредставлениеСсылки);
		Для Каждого ИмяПоля Из Поля Цикл
			Представление = СтрЗаменить(Представление, "["+ИмяПоля+"]", СокрП(Данные[ИмяПоля]));
		КонецЦикла;
	КонецЕсли;
	Возврат Представление;
КонецФункции

Функция ПолучитьСтрокуСВыделением(Источник, Образец) Экспорт
	Если ПустаяСтрока(Образец) Тогда
		Возврат Источник;
	КонецЕсли;
	ИсточникДляПоиска		= НРег(Источник);
	ШрифтВыделения			= Новый Шрифт(,,Истина);
	ЦветВыделения			= ЦветаСтиля.ЦветНайденногоТекстаПриВводеПоСтроке;
	ДлинаОбразца			= СтрДлина(Образец);
	МассивСтрок				= Новый Массив;
	ИндексПозиции			= 1;
	ДлинаИсточника			= СтрДлина(Источник);
	Пока ИндексПозиции <= ДлинаИсточника Цикл
		НайденныйИндексПозиции = СтрНайти(ИсточникДляПоиска, Образец, НаправлениеПоиска.СНачала, ИндексПозиции);
		Если НайденныйИндексПозиции = 0 Тогда
			МассивСтрок.Добавить(Сред(Источник, ИндексПозиции));
			Прервать;
		КонецЕсли;
		МассивСтрок.Добавить(Сред(Источник, ИндексПозиции, НайденныйИндексПозиции - ИндексПозиции));
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(Сред(Источник, НайденныйИндексПозиции, ДлинаОбразца), ШрифтВыделения, ЦветВыделения));
		ИндексПозиции = НайденныйИндексПозиции + ДлинаОбразца;
	КонецЦикла;
	Возврат Новый ФорматированнаяСтрока(МассивСтрок);
КонецФункции

// Вызывается из одноименной предопределенной процедуры модуля менеджера объекта
//
// Параметры:
//	МенеджерДанных          - менеджер объектов
//	ДанныеВыбора            - список значений, переменная, в которую будут заполнены данные выбора
//  Параметры               - структура, параметры данных выбора
//	ПоляВводаПоСтроке       - массив полей, по которым будет осуществляться подбор. Если не указан, то выбор будет по стандартным полям из метаданных
//	ДополнениеПредставления - строка, перечень полей, которые будут выводиться в качестве представления найденного значения,
//							  по-умолчанию представление <Поле поиска> (Наименование), если найдено в поле поиска
//  						  Наименование (Код), если найдено в Наименовании, Код (Наименование), если найдено в коде
//
Процедура ЗаполнитьДанныеВыбора(ИмяТаблицы, ДанныеВыбора, Параметры, Знач ПоляВводаПоСтроке = Неопределено, Знач ШаблонПредставления = Неопределено) Экспорт
	МенеджерОбъекта		= ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ИмяТаблицы);
	МетаданныеОбъекта	= МенеджерОбъекта.ПустаяСсылка().Метаданные();

	СпособПоискаСтроки 	= Неопределено;
	Если Не Параметры.Свойство("СпособПоискаСтроки", СпособПоискаСтроки) ИЛИ СпособПоискаСтроки = Неопределено Тогда
		СпособПоискаСтроки = МетаданныеОбъекта.СпособПоискаСтрокиПриВводеПоСтроке;	
	КонецЕсли;
	
	Если ПоляВводаПоСтроке = Неопределено Тогда
		ПоляВводаПоСтроке = ПолучитьПоляВводаПоСтроке(МетаданныеОбъекта);	
	Иначе
		Если ТипЗнч(ПоляВводаПоСтроке) = Тип("Строка") Тогда
			ПоляВводаПоСтроке = РаботаСМассивом.Массив(ПоляВводаПоСтроке);
		КонецЕсли;
	КонецЕсли;
	
	Поля = ОбщегоНазначения.СкопироватьРекурсивно(ПоляВводаПоСтроке);
	Если Поля.Найти("Ссылка") = Неопределено Тогда
		Поля.Добавить("Ссылка");
	КонецЕсли;
	Если Поля.Найти("ПометкаУдаления") = Неопределено Тогда
		Поля.Добавить("ПометкаУдаления");
	КонецЕсли;
	
	Запрос				= Новый Запрос;
	СхемаЗапроса		= Новый СхемаЗапроса; 
	СхемаЗапроса.УстановитьТекстЗапроса(НастроитьЗапросОбработкиПолученияДанныхВыбора(Запрос, ИмяТаблицы, Поля, Параметры, 50));
	ЗапросПакета 		= СхемаЗапроса.ПакетЗапросов[СхемаЗапроса.ПакетЗапросов.Количество()-1];
	ЗапросПакета.ВыбиратьРазрешенные = Истина;
	СтрокаПоиска		= Параметры.СтрокаПоиска;
	СтрокаПоиска 		= ?(СтрокаПоиска = Неопределено, "", СтрокаПоиска);
	Если СтрокаПоиска <> "" Тогда
		РаботаСоСхемойЗапроса.ДобавитьУсловиеПодобно(СхемаЗапроса, , ПоляВводаПоСтроке, СтрокаПоиска, СпособПоискаСтроки);
	КонецЕсли;
	РаботаСоСхемойЗапроса.Поле(ЗапросПакета, ЗапросПакета.Операторы[0],, "ПРЕДСТАВЛЕНИЕССЫЛКИ(Источник.Ссылка)", "ПредставлениеСсылки");
	Запрос.Текст		= СхемаЗапроса.ПолучитьТекстЗапроса();
	ДанныеВыбора		= Новый СписокЗначений;
	Выборка				= Запрос.Выполнить().Выбрать();
	ДанныеВыбора		= Новый СписокЗначений;
	СтрокаПоиска		= НРег(СтрокаПоиска);
	Пока Выборка.Следующий() Цикл
		ЗначениеСписка	= Новый Структура;
		ЗначениеСписка.Вставить("Значение",           Выборка.Ссылка);
		ЗначениеСписка.Вставить("ПометкаУдаления",    Выборка.ПометкаУдаления);
		ДанныеВыбора.Добавить(ЗначениеСписка, ПолучитьСтрокуСВыделением(ПолучитьПредставление(ШаблонПредставления, Выборка, ПоляВводаПоСтроке), СтрокаПоиска));
	КонецЦикла;
КонецПроцедуры

Функция ПолучитьСхемуЗапросаПоИсточнику(Таблица, Псевдоним = "Источник", Поля = Неопределено, ТекстЗапроса = Неопределено) Экспорт
	СхемаЗапроса 		= Новый СхемаЗапроса();
	Если ТекстЗапроса = Неопределено Тогда
		//  Конструирование текста запроса по структуре параметров
		ЗапросИсточника		= РаботаСоСхемойЗапроса.ЗапросПакета(СхемаЗапроса);
		ОператорИсточника	= РаботаСоСхемойЗапроса.Оператор(ЗапросИсточника);
		Источник			= РаботаСоСхемойЗапроса.Источник(ОператорИсточника, Таблица, Псевдоним);
		//*****ПОЛЯ ВЫБОРКИ***** 
		Если Поля = Неопределено Тогда
			Для каждого Поле Из Источник.Источник.ДоступныеПоля Цикл
				РаботаСоСхемойЗапроса.Поле(ЗапросИсточника, ОператорИсточника, , Псевдоним+"."+Поле.Имя);
			КонецЦикла;
		Иначе
			Если ТипЗнч(Поля) = Тип("Строка") Тогда
				Поля = РаботаСМассивом.Массив(Поля);
			КонецЕсли;
			Для каждого Поле Из Поля Цикл
				РаботаСоСхемойЗапроса.Поле(ЗапросИсточника, ОператорИсточника, , Псевдоним+"."+Поле);
			КонецЦикла;
		КонецЕсли;
	Иначе
		СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
	КонецЕсли; 
	Возврат СхемаЗапроса;
КонецФункции

// Прокси функция получения текста запроса по параметрам выбора
//
// Параметры:
//  ИмяТаблицы 			- Строка 	- "Справочник.Контрагенты"
//	ПараметрыЗапроса	- Структура - параметры отбора, наложенные не на основную таблицу. В эту структуру перемещаются параметры из структуры Параметры.Отбор
//  Параметры 			- Структура - параметры выбора
//  Поля 				- Строка 	- поля основной таблицы через зарятую, которые будут в запросе. Используется для целей оптимизации запроса в подсистемах, использующих функцию
//						- Массив 	- 
//  КоличествоПолучаемыхЗаписей - Число - 
//  Назначение 			- Строка - "ФОРМАВЫБОРА" - вызов из формы выбора. Для данного вызова в запрос добавляются группы иерархии для иерархических справочников
//						- Строка - "СПИСОКВЫБОРА" - условия отбора сразу учитываются в тексте запроса, также добвляется отбор по группам в зависимости от параметра ВыборГруппИЭлементов
//  ТекстЗапроса		- Строка - первоначальный текст запроса из источника. Если не определено, то определяется по умолчанию по полям таблицы источника
//
Функция ПолучитьТекстЗапроса(ИмяТаблицы, ПараметрыЗапроса = Неопределено, Параметры, Поля, КоличествоПолучаемыхЗаписей = Неопределено, Назначение = Неопределено, ТекстЗапроса = Неопределено)
	Перем ПериодИспользования;
	МенеджерОбъекта	= ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ИмяТаблицы);
	ПустаяСсылка = МенеджерОбъекта.ПустаяСсылка();
	МетаданныеОбъекта = ПустаяСсылка.Метаданные();
	Если Метаданные.ОпределяемыеТипы.МетаданныеСОграничениемВыбора.Тип.СодержитТип(ТипЗнч(ПустаяСсылка)) Тогда
		ТекстЗапроса = МенеджерОбъекта.ПолучитьТекстЗапроса(ПараметрыЗапроса, Параметры, Поля, ТекстЗапроса);
	КонецЕсли;
	СхемаЗапроса = Новый СхемаЗапроса();
	Если ПустаяСтрока(ТекстЗапроса) Тогда
		Если Поля = Неопределено Тогда
			Поля = Новый Массив;
			Для каждого Реквизит Из МетаданныеОбъекта.СтандартныеРеквизиты Цикл
				Поля.Добавить(Реквизит.Имя);
			КонецЦикла;
		ИначеЕсли ТипЗнч(Поля) = Тип("Строка") Тогда
			Поля = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Поля,,, Истина);
		КонецЕсли;
		//  Конструирование текста запроса по структуре параметров
		ЗапросПакета	= РаботаСоСхемойЗапроса.ЗапросПакета(СхемаЗапроса);
		Оператор		= РаботаСоСхемойЗапроса.Оператор(ЗапросПакета);
		//*****ИЗ*****
		РаботаСоСхемойЗапроса.Источник(Оператор, ИмяТаблицы, "Источник");  
		//*****ПОЛЯ ВЫБОРКИ***** 
		Для каждого Поле Из Поля Цикл
			РаботаСоСхемойЗапроса.Поле(ЗапросПакета, Оператор, , "Источник."+Поле, Поле);
		КонецЦикла;
	Иначе
		СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
		Оператор = СхемаЗапроса.ПакетЗапросов[СхемаЗапроса.ПакетЗапросов.Количество()-1].Операторы[0];
	КонецЕсли;
	//  ГДЕ
	ТолькоДействующие = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "ТолькоДействующие", Истина);
	Если ТолькоДействующие Тогда
		ДоступныеПоля = Оператор.Источники.НайтиПоПсевдониму("Источник").Источник.ДоступныеПоля;
		Если ДоступныеПоля.Найти("ДатаОкончанияИспользования") <> Неопределено Тогда
			Если Параметры.Свойство("Отбор") Тогда
				ПериодИспользования = НачалоДня(ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры.Отбор, "ПериодИспользования", ТекущаяДата()));
				Параметры.Отбор.Удалить("ПериодИспользования");
			Иначе
				ПериодИспользования = НачалоДня(ТекущаяДата());
			КонецЕсли;
			Оператор.Отбор.Добавить("Источник.ДатаОкончанияИспользования = ДАТАВРЕМЯ(1, 1, 1) ИЛИ Источник.ДатаОкончанияИспользования >= &ПериодИспользования");
			Если ПараметрыЗапроса = Неопределено Тогда
				ПараметрыЗапроса = Новый Структура;
			КонецЕсли;
			ПараметрыЗапроса.Вставить("ПериодИспользования", ПериодИспользования);
		КонецЕсли; 
		Если ДоступныеПоля.Найти("ПометкаУдаления") <> Неопределено Тогда
			Оператор.Отбор.Добавить("НЕ Источник.ПометкаУдаления"); 
		КонецЕсли;
	КонецЕсли;
	Если ВРег(Назначение) = "СПИСОКВЫБОРА" И Параметры.Свойство("Отбор") Тогда
		Для Каждого ЭлементСтруктуры Из Параметры.Отбор Цикл
			ТипЗначения = ТипЗнч(ЭлементСтруктуры.Значение);
			Если ТипЗначения = Тип("Массив") ИЛИ ТипЗначения = Тип("ФиксированныйМассив") Тогда
				Оператор.Отбор.Добавить("Источник."+ЭлементСтруктуры.Ключ+" В (&"+ЭлементСтруктуры.Ключ+")"); 
			Иначе
				Оператор.Отбор.Добавить("Источник."+ЭлементСтруктуры.Ключ+" = &"+ЭлементСтруктуры.Ключ); 
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Если ВРег(Назначение) = "СПИСОКВЫБОРА" Тогда // ограничение выбора по элементам/группам
		Если Параметры.Свойство("ВыборГруппИЭлементов") 
			И Метаданные.Справочники.Содержит(МетаданныеОбъекта) 
			И МетаданныеОбъекта.Иерархический 
			И МетаданныеОбъекта.ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов Тогда
			Если Параметры.ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Элементы Тогда
				Оператор.Отбор.Добавить("НЕ Источник.ЭтоГруппа");
			ИначеЕсли Параметры.ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Группы Тогда
				Оператор.Отбор.Добавить("Источник.ЭтоГруппа");
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ВРег(Назначение) = "ФОРМАВЫБОРА" Тогда // добавить иерархию
		//  Далее реализован шаблон "Расширение данных источника" (см. https://infostart.ru/public/811832/#_Toc512118894)
		Если Метаданные.Справочники.Содержит(МетаданныеОбъекта) 
			И МетаданныеОбъекта.Иерархический 
			И МетаданныеОбъекта.ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов Тогда
			ОсновнойИсточник = Оператор.Источники.НайтиПоПсевдониму("Источник");
			//  Шаблон "Расширение данных источника" (подсистема "Работа со схемой запроса")
			Для Каждого Соединение Из ОсновнойИсточник.Соединения Цикл
				Если Соединение.ТипСоединения = ТипСоединенияСхемыЗапроса.Внутреннее Тогда
					ИсточникСправа = Соединение.Источник.Источник;
					Соединение.ТипСоединения = ТипСоединенияСхемыЗапроса.ЛевоеВнешнее;
					Оператор.Отбор.Добавить("НЕ "+ИсточникСправа.Псевдоним+"."+ИсточникСправа.ДоступныеПоля[0].Имя+" Есть Null");
				КонецЕсли;
			КонецЦикла;
			Если Оператор.Отбор.Количество()>0 Тогда
				МассивУсловияОтбора = Новый Массив;
				Для Каждого Отбор Из Оператор.Отбор Цикл
					МассивУсловияОтбора.Добавить(Строка(Отбор));
				КонецЦикла;
				Оператор.Отбор.Очистить();
				Оператор.Отбор.Добавить("("+СтрСоединить(МассивУсловияОтбора, ") И (")+") ИЛИ Источник.ЭтоГруппа");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если КоличествоПолучаемыхЗаписей <> Неопределено Тогда
		Оператор.КоличествоПолучаемыхЗаписей = КоличествоПолучаемыхЗаписей;
	КонецЕсли;
	Возврат СхемаЗапроса.ПолучитьТекстЗапроса();
КонецФункции
	
// Настройка Запроса для обработки получения данных выбора
//
// Параметры:
//  Запрос 		- Запрос
//  ИмяТаблицы 	- Строка - Пример: "Справочник.Организации"
//	Поля		- Строка, Массив - "Код,Наименование"
//  Параметры 	- Структура - параметры формы выбора
//	КоличествоПолучаемыхЗаписей - 
//
// Возвращаемое значение:
//  Текст запроса
// 
// Пример:
//	Запрос 			= Новый Запрос;
//	ТекстЗапроса 	= НастроитьЗапрос(Запрос, "Справочник.Организации", Параметры);
//
Функция НастроитьЗапросОбработкиПолученияДанныхВыбора(Запрос, ИмяТаблицы, Знач Поля = Неопределено, Параметры, КоличествоПолучаемыхЗаписей = 0) Экспорт
	Перем ПараметрыЗапроса;
	ТекстЗапроса = ПолучитьТекстЗапроса(ИмяТаблицы, ПараметрыЗапроса, Параметры, Поля, КоличествоПолучаемыхЗаписей, "СПИСОКВЫБОРА");
	Запрос.Текст = ТекстЗапроса;
	Если Параметры.Свойство("Отбор") Тогда
		Для Каждого ЭлементСтруктуры Из Параметры.Отбор Цикл
			Запрос.УстановитьПараметр(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
		КонецЦикла;
	КонецЕсли;
	Если ПараметрыЗапроса <> Неопределено Тогда
		Для Каждого ЭлементСтруктуры Из ПараметрыЗапроса Цикл
			Запрос.УстановитьПараметр(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
		КонецЦикла;
	КонецЕсли;
	Возврат ТекстЗапроса;
КонецФункции

// Используется для настройки динамического списка
//
// Пример:
//&НаСервере
//Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
//	РаботаСДаннымиВыбора.ЗаполнитьТекстЗапросаДинамическогоСписка(Список, Параметры);
//КонецПроцедуры
//
Процедура ЗаполнитьТекстЗапросаДинамическогоСписка(Список, Параметры, Поля = Неопределено) Экспорт
	Перем ЗначениеПараметра;
	ПараметрыЗапроса	= Новый Структура;
	ОсновнаяТаблица 	= Список.ОсновнаяТаблица;
	Список.ТекстЗапроса	= ПолучитьТекстЗапроса(Список.ОсновнаяТаблица, ПараметрыЗапроса, Параметры, Поля,, "ФОРМАВЫБОРА", ?(Список.ПроизвольныйЗапрос, Список.ТекстЗапроса, Неопределено));
	ОбщийКлиентСервер.УстановитьЗначение(Список.ОсновнаяТаблица, ОсновнаяТаблица);
	Для Каждого ДоступныйПараметрКомпоновки Из Список.Параметры.ДоступныеПараметры.Элементы Цикл
		ПараметрКомпоновки = ДоступныйПараметрКомпоновки.Параметр;
		Если НЕ ПараметрыЗапроса.Свойство(Строка(ПараметрКомпоновки), ЗначениеПараметра) Тогда
			Продолжить;
		КонецЕсли;
		Список.Параметры.УстановитьЗначениеПараметра(ПараметрКомпоновки, ЗначениеПараметра);
	КонецЦикла;
	Список.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("ТекстЗапроса", Список.ТекстЗапроса);
КонецПроцедуры
